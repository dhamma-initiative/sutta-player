import { PlaylistIterator, TrackSelection } from '../models/album-player-state.js';
import { AlbumStorageQueryable } from "../models/album-storage-queryable.js";
import { DeferredPromise } from '../runtime/deferred-promise.js';
import { BaseController, BaseView } from './base-controller.js';
import { CatalogTabPageController, CatalogTabPageView } from './catalog-tab-page-controller.js';
import { HomePageTabController, HomeTabPageView } from './home-tab-page-controller.js';
import { MainMenuController, MainMenuView } from './main-menu-controller.js';
import { TabPageController, TabPageView } from './tab-page-controller.js';
export declare class SuttaPlayerContainer<V extends SuttaPlayerFabView<any>> extends BaseController<V> {
    static VERSION: string;
    albumStore: AlbumStorageQueryable;
    mainMenuController: MainMenuController<MainMenuView<any>>;
    homePageTabController: HomePageTabController<HomeTabPageView<any>>;
    catalogTabPageController: CatalogTabPageController<CatalogTabPageView<any>>;
    tabPageList: TabPageController<TabPageView<any>>[];
    controllerList: BaseController<BaseView<any>>[];
    tabContextMenuMap: Map<number, HTMLElement>;
    tabSelectedIndex: number;
    private _tabWndScrollPosMap;
    private _playlistIteratorMap;
    private appRoot;
    private _lastScrollTime;
    audDurationWait: DeferredPromise<number>;
    audDurationWaitState: number;
    constructor(appRoot: string, albumStorage: AlbumStorageQueryable);
    protected _createView(): Promise<void>;
    setup(): Promise<void>;
    tearDown(): Promise<void>;
    registerController(ctrl: BaseController<BaseView<any>>): void;
    registerIterator(key: string, itr: PlaylistIterator): void;
    openTab(tabNum: number): void;
    showUserMessage(msg: string, dur?: number): void;
    private _injectVersionInfo;
    protected _registerListeners(): Promise<void>;
    private _registerContextMenuListners;
    private _registerPreviousNextListeners;
    private _registerSkipBackForwardListeners;
    private _registerBookmarkListeners;
    private _registerNavigationListeners;
    private _registerAudioPlayerListeners;
    private _onAudioEnded;
    _loadTrack(srcSel: TrackSelection): Promise<boolean>;
    _onLoadAudio(srcSel: TrackSelection): Promise<void>;
    createAudioDurationWait(): void;
    getAudioPositionAsPerc(): Promise<number>;
    private _onShareLink;
    private _preparePlaylistIterator;
}
export declare class SuttaPlayerFabView<C extends SuttaPlayerContainer<SuttaPlayerFabView<C>>> extends BaseView<C> {
    audioPlayerElem: HTMLAudioElement;
    previousTrackElem: HTMLAnchorElement;
    skipsBack5SecElem: HTMLAnchorElement;
    skipsFwd5SecElem: HTMLAnchorElement;
    nextTrackElem: HTMLAnchorElement;
    setStartAtBookmarkElem: HTMLAnchorElement;
    setStopAtBookmarkElem: HTMLAnchorElement;
    clearBookmarkPositionsElem: HTMLAnchorElement;
    shareLinkElem: HTMLButtonElement;
    gotoTopElem: HTMLAnchorElement;
    tabSliderElem: HTMLInputElement;
    snackbarElem: HTMLDivElement;
    ctxMenuToggleIconElem: HTMLElement;
    ctxMenuToggleElem: HTMLButtonElement;
    lhsFabSectionElem: HTMLDivElement;
    bind(): Promise<void>;
    refresh(): Promise<void>;
    showMessage(msg: string, dur?: number): void;
    showHideContextControls(show: boolean): void;
    isCtxMenuToggleOpen(): boolean;
    loadTrackAudio(isNewAwaitDurRqd: boolean[]): Promise<boolean>;
    loadTrackAudioWith(trackSel: TrackSelection, audioElem: HTMLAudioElement, isNewAwaitDurRqd: boolean[]): Promise<boolean>;
    moveToTabContextMenu(tabCtxMenuElem: HTMLElement): void;
    updatePlayingTrackInfo(baseRef: string, status: string): void;
    seekToTimePosition(charPos: number, charPerc: number, audDur: number): void;
    private _finaliseShareLinkLoadIfRqd;
    static ELEM_ID: string;
}
