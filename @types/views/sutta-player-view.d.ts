import { AudioStorageQueryable } from '../models/audio-storage-queryable.js';
import { AlbumPlayerState, TrackSelection } from '../models/album-player-state.js';
import { AlbumStorageQueryable } from "../models/album-storage-queryable.js";
export declare class SuttaPlayerView {
    static LINEID_PREFIX: string;
    autoPlayElem: HTMLInputElement;
    playNextElem: HTMLInputElement;
    repeatElem: HTMLInputElement;
    linkTextToAudioElem: HTMLInputElement;
    showLineNumsElem: HTMLInputElement;
    darkThemeElem: HTMLInputElement;
    searchAlbumsElem: HTMLSelectElement;
    useRegExElem: HTMLInputElement;
    ignoreDiacriticsElem: HTMLInputElement;
    offlineMenuElem: HTMLAnchorElement;
    resetAppMenuElem: HTMLAnchorElement;
    aboutMenuElem: HTMLAnchorElement;
    aboutDialogElem: HTMLDialogElement;
    aboutDialogCloseElem: HTMLAnchorElement;
    aboutTextBodyElem: HTMLParagraphElement;
    albumTrackSelectionElem: HTMLDetailsElement;
    albumElem: HTMLSelectElement;
    trackElem: HTMLSelectElement;
    loadAudioElem: HTMLButtonElement;
    loadTextElem: HTMLButtonElement;
    loadRandomElem: HTMLButtonElement;
    shareLinkElem: HTMLButtonElement;
    searchForElem: HTMLInputElement;
    searchSectionElem: HTMLDetailsElement;
    searchResultsElem: HTMLSelectElement;
    playingTrackElem: HTMLElement;
    linkNavToAudioElem: HTMLAnchorElement;
    audioPlayerElem: HTMLAudioElement;
    displayingTrackElem: HTMLElement;
    linkNavToTextElem: HTMLAnchorElement;
    trackTextBodyElem: HTMLDivElement;
    offlineDialogElem: HTMLDialogElement;
    offlineDialogCloseElem: HTMLAnchorElement;
    offlineTitleElem: HTMLElement;
    downloadAlbumElem: HTMLInputElement;
    deleteAlbumElem: HTMLInputElement;
    removeAudioFromCacheElem: HTMLButtonElement;
    processingInfoElem: HTMLDivElement;
    processingProgressElem: HTMLProgressElement;
    resetAppDialogElem: HTMLDialogElement;
    resetAppCloseElem: HTMLAnchorElement;
    resetAppConfirmElem: HTMLAnchorElement;
    snackbarElem: HTMLDivElement;
    scrollPlayToggleElem: HTMLInputElement;
    skipAudioToLineElem: HTMLAnchorElement;
    scrollTextWithAudioElem: HTMLInputElement;
    gotoTopElem: HTMLAnchorElement;
    private _model;
    private _albumStore;
    private _audioStore;
    private _charPosLineIndex;
    removeFromCacheBaseRef: string;
    constructor(mdl: AlbumPlayerState, albumStore: AlbumStorageQueryable, audioStore: AudioStorageQueryable);
    initialise(cb: (event: MouseEvent) => void): Promise<void>;
    refreshAudioControls(): void;
    loadTracksList(): void;
    loadTrackWith(trackSel: TrackSelection): Promise<string>;
    loadTrackTextForUi(lineSelCb: (event: MouseEvent) => void): Promise<void>;
    createLineRefValues(lineNum: number): string;
    setColorTheme(): void;
    scrollToTextLineNumber(lineNum: number, idxPos: number): void;
    scrollToTextPercCentred(perc: number): void;
    seekToTimePosition(charPos: number, charPerc: number, audDur: number): void;
    syncTextPositionWithAudio(): void;
    parseLineNumber(idRef: string): number;
    static createLineElementId(lineNum: number): string;
    loadTrackAudio(): void;
    loadTrackAudioWith(trackSel: TrackSelection, audioElem: HTMLAudioElement): boolean;
    updatePlayingTrackInfo(baseRef: string, status: string): void;
    showMessage(msg: string, dur?: number): void;
    toggleLineNums(): void;
    toggleAboutInfo(event: any): Promise<void>;
    toggleOfflineDialog(event: any): Promise<void>;
    toggleResetAppDialog(event: any): void;
    updateOfflineInfo(processingInfo: string, perc: number): void;
    refreshSkipAudioToLine(): void;
    loadAlbumsList(): void;
    private _bindHtmlElements;
    private _bindSettingElements;
    private _bindNavigationElements;
    private _bindDisplayElements;
    private _bindOfflineElements;
    private _bindResetAppElements;
    private _bindAboutElements;
    private _bindMiscElements;
    private _getAudioPositionAsPerc;
    private _charPosToLineNumPercOffset;
}
