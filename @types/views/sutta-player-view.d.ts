import { AlbumPlayerState, TrackSelection } from '../models/album-player-state.js';
import { AlbumStorageQueryable } from "../models/album-storage-queryable.js";
export declare class SuttaPlayerView {
    static LINEID_PREFIX: string;
    homeMenuElem: HTMLInputElement;
    catalogMenuElem: HTMLInputElement;
    searchMenuElem: HTMLInputElement;
    playlistMenuElem: HTMLInputElement;
    offlineMenuElem: HTMLInputElement;
    homeTabElem: HTMLDivElement;
    catalogTabElem: HTMLDivElement;
    searchTabElem: HTMLDivElement;
    playlistTabElem: HTMLDivElement;
    offlineTabElem: HTMLDivElement;
    autoPlayElem: HTMLInputElement;
    playNextElem: HTMLInputElement;
    repeatElem: HTMLInputElement;
    loadAudioWithTextElem: HTMLInputElement;
    showLineNumsElem: HTMLInputElement;
    searchScopeElem: HTMLSelectElement;
    darkThemeElem: HTMLInputElement;
    resetAppMenuElem: HTMLAnchorElement;
    aboutMenuElem: HTMLAnchorElement;
    aboutDialogElem: HTMLDialogElement;
    aboutDialogCloseElem: HTMLAnchorElement;
    aboutTextBodyElem: HTMLParagraphElement;
    albumElem: HTMLSelectElement;
    trackElem: HTMLSelectElement;
    loadCatalogTrackElem: HTMLButtonElement;
    selectRandomElem: HTMLButtonElement;
    shareLinkElem: HTMLButtonElement;
    searchForElem: HTMLInputElement;
    searchResultsLabelElem: HTMLSpanElement;
    pauseSearchResultsElem: HTMLInputElement;
    abortSearchElem: HTMLAnchorElement;
    clearSearchResultsElem: HTMLAnchorElement;
    searchResultsElem: HTMLTextAreaElement;
    useRegExElem: HTMLInputElement;
    regExFlagsElem: HTMLInputElement;
    applyAndBetweenTermsElem: HTMLInputElement;
    ignoreDiacriticsElem: HTMLInputElement;
    playingTrackElem: HTMLElement;
    audioPlayerElem: HTMLAudioElement;
    displayingTrackElem: HTMLElement;
    revealInCatElem: HTMLAnchorElement;
    trackTextBodyElem: HTMLDivElement;
    offlineAlbumTitleElem: HTMLElement;
    offlineTrackTitleElem: HTMLElement;
    concurrencyCountElem: HTMLSelectElement;
    downloadAlbumElem: HTMLInputElement;
    deleteAlbumElem: HTMLInputElement;
    addTrackToCacheElem: HTMLButtonElement;
    removeTrackFromCacheElem: HTMLButtonElement;
    processingInfoElem: HTMLDivElement;
    processingProgressElem: HTMLProgressElement;
    resetAppDialogElem: HTMLDialogElement;
    resetAppCloseElem: HTMLAnchorElement;
    resetAppConfirmElem: HTMLAnchorElement;
    snackbarElem: HTMLDivElement;
    ctxMenuToggleElem: HTMLButtonElement;
    ctxMenuToggleIconElem: HTMLElement;
    skipAudioToLineElem: HTMLAnchorElement;
    scrollTextWithAudioElem: HTMLInputElement;
    gotoTopElem: HTMLAnchorElement;
    tabSliderElem: HTMLInputElement;
    tabPageElems: HTMLDivElement[];
    tabMenuElems: HTMLInputElement[];
    private _model;
    private _albumStore;
    private _charPosLineIndex;
    constructor(mdl: AlbumPlayerState, albumStore: AlbumStorageQueryable);
    initialise(cb: (event: MouseEvent) => void): Promise<void>;
    openTab(tabNum: number, prevTabNum: number): void;
    refreshViewSettings(): void;
    refreshTrackSelectionList(): Promise<void>;
    refreshTrackSelectionLabel(trackSel?: TrackSelection): Promise<void>;
    private _annotateTrackSelection;
    loadTrackWith(trackSel: TrackSelection): Promise<string>;
    loadTrackTextForUi(lineSelCb: (event: MouseEvent) => void): Promise<void>;
    createLineRefValues(lineNum: number): string;
    setColorTheme(): void;
    scrollToTextLineNumber(lineNum: number, idxPos: number): void;
    scrollToTextPercCentred(perc: number): void;
    seekToTimePosition(charPos: number, charPerc: number, audDur: number): void;
    syncTextPositionWithAudio(): void;
    parseLineNumber(idRef: string): number;
    static createLineElementId(lineNum: number): string;
    loadTrackAudio(isNewAwaitDurRqd: boolean[]): Promise<boolean>;
    loadTrackAudioWith(trackSel: TrackSelection, audioElem: HTMLAudioElement, isNewAwaitDurRqd: boolean[]): Promise<boolean>;
    updatePlayingTrackInfo(baseRef: string, status: string): void;
    showMessage(msg: string, dur?: number): void;
    toggleLineNums(): void;
    toggleAboutInfo(event: any): Promise<void>;
    private _prepareOfflineTab;
    toggleResetAppDialog(event: any): void;
    updateOfflineInfo(processingInfo: string, perc: number): void;
    refreshSkipAudioToLine(): void;
    loadAlbumsList(): void;
    showHideContextControls(show: boolean): void;
    private _finaliseShareLinkLoadIfRqd;
    private _isCtxMenuToggleOpen;
    private _bindHtmlElements;
    private _bindTabElements;
    private _bindSettingElements;
    private _bindNavigationElements;
    private _bindSearchElements;
    private _bindDisplayElements;
    private _bindOfflineElements;
    private _bindResetAppElements;
    private _bindAboutElements;
    private _bindMiscElements;
    private _getAudioPositionAsPerc;
    private _charPosToLineNumPercOffset;
}
