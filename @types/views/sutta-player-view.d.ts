import { AudioStorageQueryable } from '../models/audio-storage-queryable.js';
import { SuttaPlayerState, TrackSelection } from '../models/sutta-player-state.js';
import { SuttaStorageQueryable } from "../models/sutta-storage-queryable.js";
export declare class SuttaPlayerView {
    autoPlayElem: HTMLInputElement;
    playNextElem: HTMLInputElement;
    repeatElem: HTMLInputElement;
    linkTextToAudioElem: HTMLInputElement;
    offlineMenuElem: HTMLAnchorElement;
    resetAppMenuElem: HTMLAnchorElement;
    aboutMenuElem: HTMLAnchorElement;
    aboutDialogElem: HTMLDialogElement;
    aboutDialogCloseElem: HTMLAnchorElement;
    aboutTextBodyElem: HTMLParagraphElement;
    albumTrackSelectionElem: HTMLDetailsElement;
    albumElem: HTMLSelectElement;
    trackElem: HTMLSelectElement;
    loadAudioElem: HTMLButtonElement;
    loadTextElem: HTMLButtonElement;
    loadRandomElem: HTMLButtonElement;
    shareLinkElem: HTMLButtonElement;
    playingTrackElem: HTMLElement;
    audioPlayerElem: HTMLAudioElement;
    displayingTrackElem: HTMLElement;
    trackTextBodyElem: HTMLDivElement;
    offlineDialogElem: HTMLDialogElement;
    offlineDialogCloseElem: HTMLAnchorElement;
    offlineTitleElem: HTMLElement;
    downloadAlbumElem: HTMLInputElement;
    deleteAlbumElem: HTMLInputElement;
    stopProcessingElem: HTMLInputElement;
    processingInfoElem: HTMLDivElement;
    processingProgressElem: HTMLProgressElement;
    audioCacherElem: HTMLAudioElement;
    resetAppDialogElem: HTMLDialogElement;
    resetAppCloseElem: HTMLAnchorElement;
    resetAppConfirmElem: HTMLAnchorElement;
    private _modelState;
    private _suttaStore;
    private _audioStore;
    constructor(mdl: SuttaPlayerState, store: SuttaStorageQueryable, audResolver: AudioStorageQueryable);
    initialise(): Promise<void>;
    refreshAudioControls(): void;
    loadTracksList(): void;
    loadTrackText(): Promise<void>;
    loadTrackAudio(): void;
    loadSuttaAudioWith(trackSel: TrackSelection, viewAudio: HTMLAudioElement): boolean;
    updatePlayingTrackInfo(baseRef: string, status: string): void;
    toggleAboutInfo(event: any): Promise<void>;
    toggleOfflineDialog(event: any): void;
    toggleResetAppDialog(event: any): void;
    updateOfflineInfo(processingInfo: string, perc: number): void;
    private _loadAlbumsList;
    private _bindHtmlElements;
}
